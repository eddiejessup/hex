module HeX.Parse.Resolved.Resolve where

import qualified Data.HashMap.Strict           as HMap

import qualified HeX.Lex                       as Lex

import           HeX.Parse.Resolved.Token
import           HeX.Parse.Resolved.Parameter

theFontNr :: Int
theFontNr = 1

type CSMap = HMap.HashMap Lex.ControlSequenceLike ResolvedToken

_cs :: String -> Lex.ControlSequenceLike
_cs = Lex.ControlSequenceProper . Lex.ControlSequence

_pt :: PrimitiveToken -> ResolvedToken
_pt = PrimitiveToken

defaultCSMap :: CSMap
defaultCSMap = HMap.fromList
  [ (_cs "relax"       , _pt Relax)
  , (_cs "ignorespaces", _pt IgnoreSpaces)
  , (_cs "uppercase"   , SyntaxCommandHead $ ChangeCaseToken Upward)
  , (_cs "lowercase"   , SyntaxCommandHead $ ChangeCaseToken Downward)
  , (_cs "penalty"     , _pt AddPenalty)
  , (_cs "kern"        , _pt AddKern)
  , (_cs "vskip"       , _pt $ ModedCommand Vertical AddSpecifiedGlue)
  , (_cs "hskip"       , _pt $ ModedCommand Horizontal AddSpecifiedGlue)
  , (_cs "hfil"        , _pt $ ModedCommand Horizontal $ AddPresetGlue Fil)
  , (_cs "vfil"        , _pt $ ModedCommand Vertical $ AddPresetGlue Fil)
  , (_cs "hfill"       , _pt $ ModedCommand Horizontal $ AddPresetGlue Fill)
  , (_cs "vfill"       , _pt $ ModedCommand Vertical $ AddPresetGlue Fill)
  , (_cs "hfilneg"     , _pt $ ModedCommand Horizontal $ AddPresetGlue FilNeg)
  , (_cs "vfilneg"     , _pt $ ModedCommand Vertical $ AddPresetGlue FilNeg)
  , (_cs "hss"         , _pt $ ModedCommand Horizontal $ AddPresetGlue StretchOrShrink)
  , (_cs "vss"         , _pt $ ModedCommand Vertical $ AddPresetGlue StretchOrShrink)
  , (_cs "indent"      , _pt $ StartParagraph { indent = True })
  , (_cs "noindent"    , _pt $ StartParagraph { indent = False })
  , (_cs "par"         , _pt EndParagraph)
  , (_cs "hrule"       , _pt $ ModedCommand Vertical AddRule)
  , (_cs "vrule"       , _pt $ ModedCommand Horizontal AddRule)
  , (_cs "font"        , _pt MacroToFont)
  , (_cs "csname"      , SyntaxCommandHead CSName)
  , (_cs "endcsname"   , _pt $ SyntaxCommandArg EndCSName)
    -- Temporary pragmatism.
  , (_cs "selectfont"  , _pt $ TokenForFont theFontNr)
  , (_cs "end"         , _pt End)
    -- Macro prefixes.
  , (_cs "global"      , _pt Global)
  , (_cs "long"        , _pt Long)
  , (_cs "outer"       , _pt Outer)
    -- Macro def types.
  , (_cs "def"         , _pt $ DefineMacro { global = False, expand = False })
  , (_cs "edef"        , _pt $ DefineMacro { global = False, expand = True })
  , (_cs "gdef"        , _pt $ DefineMacro { global = True, expand = False })
  , (_cs "xdef"        , _pt $ DefineMacro { global = True, expand = True })
    -- Integer parameters.
  , (_cs "pretolerance"         , _pt $ IntegerParameter PreTolerance)
  , (_cs "tolerance"            , _pt $ IntegerParameter Tolerance)
  , (_cs "hbadness"             , _pt $ IntegerParameter HBadness)
  , (_cs "vbadness"             , _pt $ IntegerParameter VBadness)
  , (_cs "linepenalty"          , _pt $ IntegerParameter LinePenalty)
  , (_cs "hyphenpenalty"        , _pt $ IntegerParameter HyphenPenalty)
  , (_cs "exhyphenpenalty"      , _pt $ IntegerParameter ExHyphenPenalty)
  , (_cs "binoppenalty"         , _pt $ IntegerParameter BinOpPenalty)
  , (_cs "relpenalty"           , _pt $ IntegerParameter RelPenalty)
  , (_cs "clubpenalty"          , _pt $ IntegerParameter ClubPenalty)
  , (_cs "widowpenalty"         , _pt $ IntegerParameter WidowPenalty)
  , (_cs "displaywidowpenalty"  , _pt $ IntegerParameter DisplayWidowPenalty)
  , (_cs "brokenpenalty"        , _pt $ IntegerParameter BrokenPenalty)
  , (_cs "predisplaypenalty"    , _pt $ IntegerParameter PreDisplayPenalty)
  , (_cs "postdisplaypenalty"   , _pt $ IntegerParameter PostDisplayPenalty)
  , (_cs "interlinepenalty"     , _pt $ IntegerParameter InterlinePenalty)
  , (_cs "floatingpenalty"      , _pt $ IntegerParameter FloatingPenalty)
  , (_cs "outputpenalty"        , _pt $ IntegerParameter OutputPenalty)
  , (_cs "doublehyphendemerits" , _pt $ IntegerParameter DoubleHyphenDemerits)
  , (_cs "finalhyphendemerits"  , _pt $ IntegerParameter FinalHyphenDemerits)
  , (_cs "adjdemerits"          , _pt $ IntegerParameter AdjDemerits)
  , (_cs "looseness"            , _pt $ IntegerParameter Looseness)
  , (_cs "pausing"              , _pt $ IntegerParameter Pausing)
  , (_cs "holdinginserts"       , _pt $ IntegerParameter HoldingInserts)
  , (_cs "tracingonline"        , _pt $ IntegerParameter TracingOnline)
  , (_cs "tracingmacros"        , _pt $ IntegerParameter TracingMacros)
  , (_cs "tracingstats"         , _pt $ IntegerParameter TracingStats)
  , (_cs "tracingparagraphs"    , _pt $ IntegerParameter TracingParagraphs)
  , (_cs "tracingpages"         , _pt $ IntegerParameter TracingPages)
  , (_cs "tracingoutput"        , _pt $ IntegerParameter TracingOutput)
  , (_cs "tracinglostchars"     , _pt $ IntegerParameter TracingLostChars)
  , (_cs "tracingcommands"      , _pt $ IntegerParameter TracingCommands)
  , (_cs "tracingrestores"      , _pt $ IntegerParameter TracingRestores)
  , (_cs "language"             , _pt $ IntegerParameter Language)
  , (_cs "uchyph"               , _pt $ IntegerParameter UCHyph)
  , (_cs "lefthyphenmin"        , _pt $ IntegerParameter LeftHyphenMin)
  , (_cs "righthyphenmin"       , _pt $ IntegerParameter RightHyphenMin)
  , (_cs "globaldefs"           , _pt $ IntegerParameter GlobalDefs)
  , (_cs "defaulthyphenchar"    , _pt $ IntegerParameter DefaultHyphenChar)
  , (_cs "defaultskewchar"      , _pt $ IntegerParameter DefaultSkewChar)
  , (_cs "escapechar"           , _pt $ IntegerParameter EscapeChar)
  , (_cs "endlinechar"          , _pt $ IntegerParameter EndLineChar)
  , (_cs "newlinechar"          , _pt $ IntegerParameter NewLineChar)
  , (_cs "maxdeadcycles"        , _pt $ IntegerParameter MaxDeadCycles)
  , (_cs "hangafter"            , _pt $ IntegerParameter HangAfter)
  , (_cs "fam"                  , _pt $ IntegerParameter Fam)
  , (_cs "mag"                  , _pt $ IntegerParameter Mag)
  , (_cs "delimiterfactor"      , _pt $ IntegerParameter DelimiterFactor)
  , (_cs "time"                 , _pt $ IntegerParameter Time)
  , (_cs "day"                  , _pt $ IntegerParameter Day)
  , (_cs "month"                , _pt $ IntegerParameter Month)
  , (_cs "year"                 , _pt $ IntegerParameter Year)
  , (_cs "showboxbreadth"       , _pt $ IntegerParameter ShowBoxBreadth)
  , (_cs "showboxdepth"         , _pt $ IntegerParameter ShowBoxDepth)
  , (_cs "errorcontextlines"    , _pt $ IntegerParameter ErrorContextLines)
  -- Length parameters.
  , (_cs "hfuzz"                , _pt $ LengthParameter HFuzz)
  , (_cs "vfuzz"                , _pt $ LengthParameter VFuzz)
  , (_cs "overfullrule"         , _pt $ LengthParameter OverfullRule)
  , (_cs "emergencystretch"     , _pt $ LengthParameter EmergencyStretch)
  , (_cs "hsize"                , _pt $ LengthParameter HSize)
  , (_cs "vsize"                , _pt $ LengthParameter VSize)
  , (_cs "maxdepth"             , _pt $ LengthParameter MaxDepth)
  , (_cs "splitmaxdepth"        , _pt $ LengthParameter SplitMaxDepth)
  , (_cs "boxmaxdepth"          , _pt $ LengthParameter BoxMaxDepth)
  , (_cs "lineskiplimit"        , _pt $ LengthParameter LineSkipLimit)
  , (_cs "delimitershortfall"   , _pt $ LengthParameter DelimiterShortfall)
  , (_cs "nulldelimiterspace"   , _pt $ LengthParameter NullDelimiterSpace)
  , (_cs "scriptspace"          , _pt $ LengthParameter ScriptSpace)
  , (_cs "mathsurround"         , _pt $ LengthParameter MathSurround)
  , (_cs "predisplaysize"       , _pt $ LengthParameter PreDisplaySize)
  , (_cs "displaywidth"         , _pt $ LengthParameter DisplayWidth)
  , (_cs "displayindent"        , _pt $ LengthParameter DisplayIndent)
  , (_cs "parindent"            , _pt $ LengthParameter ParIndent)
  , (_cs "hangindent"           , _pt $ LengthParameter HangIndent)
  , (_cs "hoffset"              , _pt $ LengthParameter HOffset)
  , (_cs "voffset"              , _pt $ LengthParameter VOffset)
  -- Glue parameters.
  , (_cs "baselineskip"         , _pt $ GlueParameter BaselineSkip)
  , (_cs "lineskip"             , _pt $ GlueParameter LineSkip)
  , (_cs "parskip"              , _pt $ GlueParameter ParSkip)
  , (_cs "abovedisplayskip"     , _pt $ GlueParameter AboveDisplaySkip)
  , (_cs "abovedisplayshortskip", _pt $ GlueParameter AboveDisplayShortSkip)
  , (_cs "belowdisplayskip"     , _pt $ GlueParameter BelowDisplaySkip)
  , (_cs "belowdisplayshortskip", _pt $ GlueParameter BelowDisplayShortSkip)
  , (_cs "leftskip"             , _pt $ GlueParameter LeftSkip)
  , (_cs "rightskip"            , _pt $ GlueParameter RightSkip)
  , (_cs "topskip"              , _pt $ GlueParameter TopSkip)
  , (_cs "splittopskip"         , _pt $ GlueParameter SplitTopSkip)
  , (_cs "tabskip"              , _pt $ GlueParameter TabSkip)
  , (_cs "spaceskip"            , _pt $ GlueParameter SpaceSkip)
  , (_cs "xspaceskip"           , _pt $ GlueParameter XSpaceSkip)
  , (_cs "parfillskip"          , _pt $ GlueParameter ParFillSkip)
  -- Math-glue parameters.
  , (_cs "thinmuskip"           , _pt $ MathGlueParameter ThinMuSkip)
  , (_cs "medmuskip"            , _pt $ MathGlueParameter MedMuSkip)
  , (_cs "thickmuskip"          , _pt $ MathGlueParameter ThickMuSkip
    )
  -- Token list parameters.
  , (_cs "output"               , _pt $ TokenListParameter Output)
  , (_cs "everypar"             , _pt $ TokenListParameter EveryPar)
  , (_cs "everymath"            , _pt $ TokenListParameter EveryMath)
  , (_cs "everydisplay"         , _pt $ TokenListParameter EveryDisplay)
  , (_cs "everyhbox"            , _pt $ TokenListParameter EveryHBox)
  , (_cs "everyvbox"            , _pt $ TokenListParameter EveryVBox)
  , (_cs "everyjob"             , _pt $ TokenListParameter EveryJob)
  , (_cs "everycr"              , _pt $ TokenListParameter EveryCR)
  , (_cs "errhelp"              , _pt $ TokenListParameter ErrHelp)
  -- Special integers.
  , (_cs "spacefactor"          , _pt $ SpecialInteger SpaceFactor)
  , (_cs "prevgraf"             , _pt $ SpecialInteger PrevGraf)
  , (_cs "deadcycles"           , _pt $ SpecialInteger DeadCycles)
  , (_cs "insertpenalties"      , _pt $ SpecialInteger InsertPenalties)
  -- Special lengths.
  , (_cs "prevdepth"            , _pt $ SpecialLength PrevDepth)
  , (_cs "pagegoal"             , _pt $ SpecialLength PageGoal)
  , (_cs "pagetotal"            , _pt $ SpecialLength PageTotal)
  , (_cs "pagestretch"          , _pt $ SpecialLength PageStretch)
  , (_cs "pagefilstretch"       , _pt $ SpecialLength PageFilStretch)
  , (_cs "pagefillstretch"      , _pt $ SpecialLength PageFillStretch)
  , (_cs "pagefilllstretch"     , _pt $ SpecialLength PageFilllStretch)
  , (_cs "pageshrink"           , _pt $ SpecialLength PageShrink)
  , (_cs "pagedepth"            , _pt $ SpecialLength PageDepth)
  ]
