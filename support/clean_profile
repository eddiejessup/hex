#!/usr/bin/env python

import pandas as pd
import re
import sys
import os

path_in = sys.argv[1]

path_out = 'cleaned_{}'.format(os.path.basename(path_in))

lns = open(path_in).readlines()
lns = [ln.replace('<no location info>', '<no-location-info>') for ln in lns]

# Find start of proper table.
seen_preamble = False
for i, ln in enumerate(lns):
    if ln.startswith('COST CENTRE'):
        if seen_preamble:
            break
        else:
            seen_preamble = True

i_head = i
preamble_lns = lns[:i]
header_ln = lns[i]
body_lns = lns[i + 2:]

def find_next_entry(s):
    return re.search(r'[^ ]', s).span()[0]

TITLES = [
    ('cost_centre', 'COST CENTRE'),
    ('module', 'MODULE'),
    ('source', 'SRC'),
    ('nr', 'no.'),
    ('entries', 'entries'),
    ('ind_time', '%time'),
    ('ind_alloc', r'%alloc'),
    ('inh_time', '%time'),
    ('inh_alloc', r'%alloc'),
]

PERC_FIELDS = [
    'ind_time',
    'ind_alloc',
    'inh_time',
    'inh_alloc',
]

# Infer column spans.
here_sets = []
for ln in body_lns:
    i_done = 0
    heres = []
    for field, tit in TITLES:
        i_to_here = i_done + find_next_entry(ln[i_done:])
        heres.append((field, i_to_here))
        m = re.search(r'[ \n]', ln[i_to_here:])
        i_done = i_to_here + m.span()[0]
    here_sets.append(heres)

over_heres = []
for field, tit in TITLES:
    over_heres.append((field, min(dict(heres)[field] for heres in here_sets)))

def is_important(ln):
    dat = {}
    for i in range(len(over_heres)):
        field, i_here = over_heres[i]
        if i < len(over_heres) - 1:
            _, i_next = over_heres[i + 1]
            x = ln[i_here:i_next]
        else:
            x = ln[i_here:]
        if i > 1:
            x_clean = x.strip()
        else:
            x_clean = x.rstrip()
        dat[field] = x_clean

    for field in PERC_FIELDS:
        dat[field] = float(dat[field])

    for field in ['entries', 'nr']:
        dat[field] = int(dat[field])

    return max(dat[f] for f in PERC_FIELDS) > 2

important_body_lns = list(filter(is_important, body_lns))

# Replace preamble and header.
out_lns = preamble_lns + [header_ln] + important_body_lns

open(path_out, 'w').write(''.join(out_lns))
